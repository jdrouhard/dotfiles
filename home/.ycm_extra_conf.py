import os
import re
import subprocess
import itertools

from ycmd import utils
import ycm_core

DEFAULT_FLAGS = ['-Wall', '-Wextra', '-Werror', '-std=c++17', '-x', 'c++', '-I', '.']
HEADER_EXTENSIONS = ['.h', '.hxx', '.hpp', '.hh']
SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']

compilation_database_dir_map = dict()
file_directory_heuristic_map = dict()

def LoadSystemIncludes():
    regex = re.compile(r"(?:\#include \<...\> search starts here\:)(?P<list>.*?)(?:End of search list)", re.DOTALL)
    process = subprocess.Popen(['clang', '-v', '-E', '-x', 'c++', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    process_out, process_err = process.communicate('')
    output = process_out + process_err
    includes = []
    for p in re.search(regex, output.decode()).group('list').splitlines():
        p = p.strip()
        if len(p) > 0 and p.find('(framework directory)') < 0:
            includes.append('-isystem')
            includes.append(p)
    return includes
SYSTEM_INCLUDES = LoadSystemIncludes()

def FindCompilationDatabase(wd):
    for folder in utils.PathsToAllParentFolders(wd):
        if folder in compilation_database_dir_map:
            return compilation_database_dir_map[folder]

        build_dirs = ['build.clang', 'build']
        build_subdirs = ['debug', 'release']

        candidates = [
            [folder],
            [os.path.join(folder, x) for x in build_dirs],
            [os.path.join(folder, x[1], x[0]) for x in itertools.product(build_subdirs, build_dirs)],
        ]

        candidates = itertools.chain.from_iterable(candidates)

        for candidate in candidates:
            compile_commands = os.path.join(candidate, 'compile_commands.json')
            if os.path.exists(compile_commands):
                database = ycm_core.CompilationDatabase(candidate)
                compilation_database_dir_map[folder] = database
                return database

    compilation_database_dir_map[wd] = None
    return None

def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags

def GetCompilationInfoForFile(database, file_name, file_extension):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if file_extension in HEADER_EXTENSIONS:
        for extension in SOURCE_EXTENSIONS:
            replacement_file = os.path.splitext(file_name)[0] + extension
            compilation_info = database.GetCompilationInfoForFile(replacement_file)
            if compilation_info and compilation_info.compiler_flags_:
                return compilation_info
        return None
    return database.GetCompilationInfoForFile(file_name)


def FlagsForFile(file_name, **kwargs):
    file_dir = os.path.dirname(file_name)
    file_root, file_extension = os.path.splitext(file_name)

    do_cache = True
    final_flags = None
    database = FindCompilationDatabase(file_dir)

    if database:
        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object
        compilation_info = GetCompilationInfoForFile(database, file_name, file_extension)
        if not compilation_info and file_dir in file_directory_heuristic_map:
            compilation_info = file_directory_heuristic_map[file_dir]
        else:
            for alternate in [f for f in os.listdir(file_dir) if os.path.splitext(f)[1] in SOURCE_EXTENSIONS]:
                compilation_info = database.GetCompilationInfoForFile(os.path.join(file_dir, alternate))
                if compilation_info:
                    do_cache = False
                    break

        if compilation_info:
            if file_dir not in file_directory_heuristic_map:
                file_directory_heuristic_map[file_dir] = compilation_info

            final_flags = MakeRelativePathsInFlagsAbsolute(
                compilation_info.compiler_flags_,
                compilation_info.compiler_working_dir_)
            final_flags += SYSTEM_INCLUDES
            final_flags += ['-x', 'c++']

    if not final_flags:
        do_cache = False
        final_flags = MakeRelativePathsInFlagsAbsolute(DEFAULT_FLAGS, file_dir) + SYSTEM_INCLUDES

    return {
        'flags': final_flags,
        'do_cache': do_cache
    }
